{"version":3,"sources":["types/index.ts","reducer/index.ts","actions/index.ts","components/PostForm.tsx","components/Post.tsx","components/Posts.tsx","components/Post2.tsx","components/Spinner.tsx","components/FetchedPosts.tsx","routes/index/index.tsx","routes/items/index.tsx","routes/notfound/index.tsx","App.tsx","utils/types/index.ts","sagas/index.ts","index.tsx","middleware/index.ts"],"names":["Actions","postsStateInitial","posts","id","payload","fetchedPosts","statesStateInitial","postsPending","postsLoadingError","reducer","combineReducers","state","action","type","concat","post","states","pending","error","postsSuccess","connector","connect","undefined","pushPost","useState","title","updateState_","none","updateState","value","onSubmit","event","Date","now","shouldPushPost","trim","preventDefault","className","onChange","target","name","Post","style","src","alt","map","Post2","body","Spinner","props","text","role","aria-hidden","postsFetch","limit","elements","length","disabled","onClick","Index","row","col","FetchedPosts","Items","parameters","useParams","history","useHistory","useRouteMatch","push","NotFound","App","path","exact","component","isEmptyObj","arg","Object","prototype","toString","call","isObj","JSON","stringify","sagaWorker","sagaWatcher","fetchPosts","a","fetch","response","json","unknownErrorMessage","HTTP404Error","put","actions","status","message","item","batchActions","takeEvery","actionTypes","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","saga","sagaMiddleware","createStore","enableBatching","applyMiddleware","next","console","log","document","getElementById","store","rootNode","run","render"],"mappings":"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","file":"static/js/main.35d31516.chunk.js","sourcesContent":["\r\n// import {ThunkAction as ThunkAction_, ThunkDispatch as ThunkDispatch_} from 'redux-thunk'\r\nimport {Action, AnyAction} from 'redux'\r\nimport {ConnectedProps} from 'react-redux'\r\n\r\n//type ThunkAction<R> = ThunkAction_<R, TState, unknown, Action<string>>\r\n//type ThunkDispatch = ThunkDispatch_<TState, unknown, Action<string>>\r\n\r\ntype TProps<T, O = {}> = ConnectedProps<T> & O\r\n\r\ntype TPost = {\r\n  id: number,\r\n  payload: string\r\n}\r\n\r\ntype TPost2 = {\r\n  id: number,\r\n  title: string,\r\n  body: string\r\n}\r\n\r\ntype TStatesState = {\r\n  postsPending: boolean,\r\n  postsLoadingError: string\r\n}\r\n\r\ntype TPostsState = {\r\n  posts: TPost[],\r\n  fetchedPosts: TPost2[]\r\n}\r\n\r\ninterface TState {\r\n  posts: TPostsState,\r\n  states: TStatesState\r\n}\r\n\r\nenum Actions {\r\n  'POST/PUSH' = 'POST/PUSH',\r\n  'POSTS/FETCH' = 'POSTS/FETCH',\r\n  'POSTS/PENDING' = 'POSTS/PENDING',\r\n  'POSTS/SUCCESS' = 'POSTS/SUCCESS',\r\n  'POSTS/FAIL' = 'POSTS/FAIL'\r\n}\r\n\r\ntype TAction = \r\n{type: typeof Actions['POST/PUSH'], post: TPost} |\r\n{type: typeof Actions['POSTS/FETCH'], limit: number} |\r\n{type: typeof Actions['POSTS/PENDING'], pending: boolean} |\r\n{type: typeof Actions['POSTS/SUCCESS'], posts: TPost2[]} |\r\n{type: typeof Actions['POSTS/FAIL'], error: string}\r\n\r\nexport {Actions}\r\nexport type {\r\n  TPost,\r\n  TPost2, \r\n  //ThunkAction, \r\n  //ThunkDispatch, \r\n  TProps, \r\n  TPostsState,\r\n  TStatesState,\r\n  TState, \r\n  TAction}","\r\nimport {combineReducers} from 'redux'\r\nimport {TPostsState, TStatesState, TAction, Actions} from './../types'\r\n\r\nconst postsStateInitial = {\r\n  posts: [\r\n    {id: 0, payload: '🔥Post 1'},\r\n    {id: 1, payload: '😍Post 2'}\r\n  ],\r\n  fetchedPosts: []\r\n}\r\n\r\nconst statesStateInitial = {\r\n  postsPending: false,\r\n  postsLoadingError: ''\r\n}\r\n\r\nconst postsReducer = (state: TPostsState = postsStateInitial, action: TAction) => {\r\n  switch(action.type) {\r\n    case Actions['POST/PUSH']: return {...state, posts: state.posts.concat([action.post])}\r\n    case Actions['POSTS/SUCCESS']: return {...state, fetchedPosts: action.posts}\r\n    default: return state\r\n  }\r\n}\r\nconst statesReducer = (state: TStatesState = statesStateInitial, action: TAction) => {\r\n  switch(action.type) {\r\n    case Actions['POSTS/PENDING']: return {...state, postsPending: action.pending}\r\n    case Actions['POSTS/FAIL']: return {...state, postsLoadingError: action.error}\r\n    default: return state\r\n  }\r\n}\r\nconst reducer = combineReducers({\r\n  posts: postsReducer,\r\n  states: statesReducer\r\n})\r\n\r\nexport {reducer}","\r\nimport {TPost, TPost2, TAction, Actions} from \"../types\"\r\n\r\nexport const pushPost = (post: TPost): TAction => ({type: Actions['POST/PUSH'], post})\r\n\r\n\r\nexport const postsFetch = (limit: number = 5): TAction => ({type: Actions['POSTS/FETCH'], limit})\r\n\r\nexport const postsPending = (pending: boolean): TAction => ({type: Actions['POSTS/PENDING'], pending})\r\n\r\nexport const postsFail = (error: string): TAction => ({type: Actions['POSTS/FAIL'], error: error})\r\n\r\nexport const postsSuccess = (posts: TPost2[]): TAction => ({type: Actions['POSTS/SUCCESS'], posts})","\r\nimport React, { useState } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {pushPost} from '../actions'\r\nimport {TProps} from './../types'\r\n\r\ntype TPostFormState = { title: string }\r\n\r\nconst connector = connect(undefined, { pushPost })\r\n\r\nconst PostForm: React.FunctionComponent<TProps<typeof connector>> = ({pushPost}) => {\r\n\r\n  const [[state, updateState_], none] = [useState<TPostFormState>({title: 'title'}), '']\r\n\r\n  const updateState = (title: string, value: string = none) => {\r\n    updateState_(state => ({...state, [title]: value}))\r\n  }\r\n  \r\n  const submitEventHandler = (event: React.FormEvent) => {\r\n    const [id, title] = [Date.now(), state.title]\r\n    const shouldPushPost = !!title.trim()\r\n    event.preventDefault()\r\n    if (shouldPushPost) {\r\n      updateState('title')\r\n      pushPost({id, payload: title})\r\n    }\r\n  }\r\n\r\n  const changeEventHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let {name, value} = event.target\r\n    updateState(name, value)\r\n  }\r\n    \r\n  return <>\r\n    <form onSubmit={submitEventHandler}>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-2\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control form-control-sm\"\r\n            onChange={changeEventHandler}\r\n            name=\"title\"\r\n            value={state.title} />\r\n          <div className=\"form-text\">To create post input text</div>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <button type=\"submit\" className=\"btn btn-light btn-sm\">Push</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </>\r\n}\r\n\r\nexport default connector(PostForm)","\r\nimport {TPost} from './../types'\r\n\r\ninterface PostInterface {\r\n    post: TPost\r\n}\r\n\r\nconst Post: React.FunctionComponent<PostInterface> = ({post}) => {\r\n    let {id, payload} = post\r\n    return <div className=\"card text-white bg-dark mb-3\" style={{'maxWidth': '540px'}}>\r\n      <div className=\"row g-0\">\r\n        <div className=\"col-md-4\">\r\n          <img src={'https://cdn.iconscout.com/icon/free/png-512/react-1-282599.png'} alt={`${id}`} style={{'width': '100%'}}/>\r\n        </div>\r\n        <div className=\"col-md-8\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">{payload}</h5>\r\n            <p className=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\r\n            <p className=\"card-text\"><small className=\"text-muted\">Last updated N mins ago</small></p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n}\r\n\r\nexport default Post","\r\nimport {connect} from 'react-redux'\r\nimport {TProps, TState} from '../types'\r\nimport Post from './Post'\r\n\r\nconst connector = connect(\r\n  (state: TState) => ({\r\n    posts: state.posts.posts\r\n  })\r\n)\r\n\r\nconst Posts: React.FunctionComponent<TProps<typeof connector>> = ({posts}) => {\r\n  return <>\r\n    {posts.map(post => <Post post={post} key={post.id} />)}\r\n  </>\r\n}\r\n\r\nexport default connector(Posts)","\r\nimport {TPost2} from './../types'\r\n\r\ninterface PostInterface {\r\n    post: TPost2\r\n}\r\n\r\nconst Post2: React.FunctionComponent<PostInterface> = ({post}) => {\r\n    let {id, body, title} = post\r\n    return <div className=\"card text-white bg-dark mb-3\" style={{'maxWidth': '540px'}}>\r\n      <div className=\"row g-0\">\r\n        <div className=\"col-md-4\">\r\n          <img src={'https://cdn.iconscout.com/icon/free/png-512/react-1-282599.png'} alt={`${id}`} style={{'width': '100%'}}/>\r\n        </div>\r\n        <div className=\"col-md-8\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">{title}</h5>\r\n            <p className=\"card-text\">{body}</p>\r\n            <p className=\"card-text\"><small className=\"text-muted\">Last updated N mins ago</small></p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n}\r\n\r\nexport default Post2","\r\nexport const Spinner: React.FunctionComponent<{text?: string}> = props => {\r\n  return (\r\n    <div className=\"d-flex align-items-center\">\r\n      <strong>{props.text ? props.text : 'Loading...'}</strong>\r\n      <div className=\"spinner-border ms-auto\" role=\"status\" aria-hidden=\"true\"></div>\r\n    </div>\r\n  )\r\n}","\r\nimport {connect} from 'react-redux'\r\nimport Post2 from './Post2'\r\nimport {Spinner} from './Spinner'\r\nimport {postsFetch} from \"../actions\"\r\nimport {TProps, TState} from '../types'\r\n\r\nconst connector = connect(\r\n  (state: TState) => ({\r\n    fetchedPosts: state.posts.fetchedPosts,\r\n    postsPending: state.states.postsPending,\r\n    postsLoadingError: state.states.postsLoadingError\r\n  }),\r\n  {postsFetch}\r\n)\r\n\r\nconst FetchPosts: React.FunctionComponent<TProps<typeof connector>> = ({\r\n  postsFetch,\r\n  fetchedPosts,\r\n  postsPending,\r\n  postsLoadingError\r\n}) => {\r\n  const handleClick = () => postsFetch(4)\r\n  let elements\r\n\r\n  if (postsPending)\r\n    elements = <Spinner text={'Loading...'} />\r\n  else if (postsLoadingError)\r\n    elements = <div>{postsLoadingError}</div>\r\n  else if (fetchedPosts.length === 0)\r\n    elements = <div>No posts</div>\r\n  else\r\n    elements = fetchedPosts.map(post => <Post2 post={post} key={post.id} />)\r\n  \r\n  return <div>\r\n    <button\r\n      type=\"submit\"\r\n      className=\"btn btn-primary btn-sm\"\r\n      disabled={postsPending}\r\n      onClick={handleClick}>Load</button>\r\n    {elements}\r\n  </div>\r\n}\r\n\r\nexport default connector(FetchPosts)","\r\nimport PostForm from '../../components/PostForm'\r\nimport Posts from '../../components/Posts'\r\nimport FetchedPosts from '../../components/FetchedPosts'\r\n\r\nconst Index: React.FunctionComponent = () => {\r\n  let [row, col] = [{className: 'row'}, {className: 'col'}]\r\n  return <>\r\n    <div className=\"container pt-3\">\r\n      <div {...row}>\r\n        <div {...col}>\r\n          <PostForm />\r\n        </div>\r\n      </div>\r\n      <div {...row}>\r\n        <div {...col}>\r\n          SYNC POSTS\r\n          <Posts />\r\n        </div>\r\n        <div {...col}>\r\n          ASYNC POSTS\r\n          <FetchedPosts />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </>\r\n}\r\n\r\nexport default Index","\r\nimport {useParams, useHistory, useRouteMatch, Redirect} from 'react-router-dom'\r\n\r\ninterface ItemsParams {\r\n  id?: string\r\n}\r\n\r\nconst Items: React.FunctionComponent = () => {\r\n  const parameters = useParams<ItemsParams>()\r\n  const history = useHistory()\r\n  const routeMatch = useRouteMatch()\r\n  const clickHandler = (event: React.MouseEvent) => history.push('/items/5')\r\n  if (parameters.id) {\r\n    return <>{parameters.id}</>\r\n  }\r\n  else return <div>\r\n    <div>UNSPECIFIED ITEM</div>\r\n    <button\r\n      onClick={clickHandler}\r\n      type=\"submit\"\r\n      className=\"btn btn-light btn-sm\">/items/5</button>\r\n  </div>\r\n}\r\n\r\nexport default Items","\r\nimport './styles.css'\r\n\r\nconst NotFound: React.FunctionComponent = () => {\r\n  return <div className=\"notfound\">\r\n    <img src=\"https://miro.medium.com/max/800/1*hFwwQAW45673VGKrMPE2qQ.png\" />\r\n  </div>\r\n}\r\n\r\nexport default NotFound","\nimport {Route, Switch, BrowserRouter} from 'react-router-dom'\nimport Index from './routes/index'\nimport Items from './routes/items'\nimport NotFound from './routes/notfound'\n\nconst App: React.FunctionComponent = () => {\n  return <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" exact component={Index} />\n      <Route path=\"/items\" exact component={Items} />\n      <Route path=\"/items/:id\" exact component={Items} />\n      <Route path=\"*\" component={NotFound} />\n    </Switch>\n  </BrowserRouter>\n}\n\nexport default App","\r\nexport const isObj = (arg: any) => Object.prototype.toString.call(arg) === '[object Object]'\r\nexport const isEmptyObj = (arg: any) => isObj(arg) && JSON.stringify(arg) === '{}'","\r\nimport {takeEvery, put, call} from 'redux-saga/effects'\r\nimport {batchActions} from 'redux-batched-actions'\r\nimport {isEmptyObj} from '../utils/types'\r\nimport {Actions as actionTypes, TPost2} from '../types'\r\nimport * as actions from '../actions'\r\n\r\nconst fetchPosts = async (limit: number) => {\r\n  let response = await fetch(`https://jsonplaceholder.typicode.com/posts?_limit=${limit}`)\r\n  return {response, body: await response.json()}\r\n}\r\n\r\nfunction *sagaWorker(action: any): Generator<any, void, any> {\r\n  const [unknownErrorMessage, HTTP404Error] = [\r\n    'UnknownError',\r\n    'HTTP404Error: Resource not found'\r\n  ]\r\n  yield put(actions.postsPending(true))\r\n  try {\r\n    let {response, body} = yield call(fetchPosts, action.limit)\r\n    if (response.status === 404) {\r\n      throw {message: HTTP404Error}\r\n    }\r\n    if (isEmptyObj(body)) {\r\n      body = []\r\n    }\r\n    const posts: TPost2[] = body.map((item: any) => ({id: item.id, title: item.title, body: item.body}))\r\n    yield put(batchActions([\r\n      actions.postsSuccess(posts),\r\n      actions.postsPending(false)\r\n    ]))\r\n  }\r\n  catch(catched) {\r\n    yield put(batchActions([\r\n      actions.postsPending(false),\r\n      actions.postsFail(catched.message || unknownErrorMessage)\r\n    ]))\r\n  }\r\n}\r\n\r\nexport function *sagaWatcher(): Generator<any, void, any> {\r\n  yield takeEvery(actionTypes['POSTS/FETCH'], sagaWorker)\r\n}","\nimport {createStore, applyMiddleware, compose} from 'redux'\nimport {Provider} from 'react-redux'\nimport {render} from 'react-dom'\nimport {enableBatching} from 'redux-batched-actions'\nimport sagaMiddleware from 'redux-saga'\nimport './index.css'\nimport {reducer} from './reducer'\nimport App from './App'\nimport {middleware} from './middleware'\nimport {sagaWatcher} from './sagas'\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst saga = sagaMiddleware()\n\nconst [store, rootNode] = [\n  createStore(\n    // @ts-ignore\n    enableBatching(reducer), \n    composeEnhancers(applyMiddleware(middleware, saga))\n  ), \n  document.getElementById('root')\n]\n\nsaga.run(sagaWatcher)\n\nrender(<Provider store={store}><App /></Provider>, rootNode)","\r\nimport {Middleware} from 'redux'\r\nimport {TState} from '../types'\r\n\r\nexport const middleware: Middleware<{}, TState> = state => next => action => {\r\n  console.log(action.type)\r\n  next(action) //->@reducer\r\n}"],"sourceRoot":""}